// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wanderer.Infrastructure.Context;

#nullable disable

namespace Wanderer.Infrastructure.Migrations
{
    [DbContext(typeof(WandererDbContext))]
    [Migration("20250531200636_AddPrincipalKeyForPostComments")]
    partial class AddPrincipalKeyForPostComments
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Wanderer.Domain.Models.Locations.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)")
                        .HasColumnName("LATITUDE");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)")
                        .HasColumnName("LONGITUDE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("NAME");

                    b.Property<string>("NorthEastBound")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NORTH_EAST_BOUND");

                    b.Property<string>("PlaceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PLACE_ID");

                    b.Property<string>("SouthWestBound")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SOUTH_WEST_BOUND");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("PlaceId")
                        .IsUnique();

                    b.ToTable("CITIES", (string)null);
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Locations.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("COUNTRIES", (string)null);
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Locations.Waypoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)")
                        .HasColumnName("LATITUDE");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)")
                        .HasColumnName("LONGITUDE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("NAME");

                    b.Property<string>("PlaceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PLACE_ID");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TYPE");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PlaceId")
                        .IsUnique();

                    b.ToTable("WAYPOINTS", (string)null);
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Posts.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TITLE");

                    b.Property<Guid?>("TripId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TripId");

                    b.ToTable("POSTS", (string)null);
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Posts.PostComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("POST_COMMENTS", (string)null);
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Posts.PostImage", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("IMAGE_URL");

                    b.Property<string>("CityPlaceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("WaypointPlaceId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PostId", "ImageUrl");

                    b.HasIndex("CityPlaceId");

                    b.HasIndex("WaypointPlaceId");

                    b.ToTable("POST_IMAGES", (string)null);
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Posts.PostLike", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.HasKey("PostId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("POST_LIKES", (string)null);
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Trips.Trip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit")
                        .HasColumnName("IS_PUBLISHED");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("START_DATE");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2)
                        .HasColumnName("STATUS");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("TITLE");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Status");

                    b.ToTable("TRIPS", (string)null);
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Trips.Visits.CityVisit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<int>("NumberOfNights")
                        .HasColumnType("int")
                        .HasColumnName("NO_OF_NIGHTS");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("ORDER");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("START_DATE");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("TripId");

                    b.ToTable("CITY_VISITS", (string)null);
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Trips.Visits.DayVisit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CityVisitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("DATE");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("DESCRIPTION");

                    b.HasKey("Id");

                    b.HasIndex("CityVisitId");

                    b.ToTable("DAY_VISITS", (string)null);
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Trips.Visits.WaypointVisit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("DayVisitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("END_TIME");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("START_TIME");

                    b.Property<Guid>("WaypointId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DayVisitId");

                    b.HasIndex("WaypointId");

                    b.ToTable("WAYPOINT_VISITS", (string)null);
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AVATAR_URL");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("FirebaseId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("FIREBASE_ID");

                    b.Property<Guid?>("HomeCityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfileDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("PROFILE_DESCRIPTION");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("PROFILE_NAME");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("FirebaseId")
                        .IsUnique();

                    b.HasIndex("HomeCityId");

                    b.ToTable("USERS", (string)null);
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Users.UserFollower", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "FollowerId");

                    b.HasIndex("FollowerId");

                    b.ToTable("USER_FOLLOWERS", (string)null);
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Locations.City", b =>
                {
                    b.HasOne("Wanderer.Domain.Models.Locations.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Locations.Waypoint", b =>
                {
                    b.HasOne("Wanderer.Domain.Models.Locations.City", "City")
                        .WithMany("Waypoints")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Posts.Post", b =>
                {
                    b.HasOne("Wanderer.Domain.Models.Users.User", "Owner")
                        .WithMany("Posts")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Wanderer.Domain.Models.Trips.Trip", "Trip")
                        .WithMany("Posts")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Owner");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Posts.PostComment", b =>
                {
                    b.HasOne("Wanderer.Domain.Models.Posts.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wanderer.Domain.Models.Users.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Posts.PostImage", b =>
                {
                    b.HasOne("Wanderer.Domain.Models.Locations.City", "City")
                        .WithMany("Images")
                        .HasForeignKey("CityPlaceId")
                        .HasPrincipalKey("PlaceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Wanderer.Domain.Models.Posts.Post", "Post")
                        .WithMany("Images")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wanderer.Domain.Models.Locations.Waypoint", "Waypoint")
                        .WithMany("Images")
                        .HasForeignKey("WaypointPlaceId")
                        .HasPrincipalKey("PlaceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("City");

                    b.Navigation("Post");

                    b.Navigation("Waypoint");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Posts.PostLike", b =>
                {
                    b.HasOne("Wanderer.Domain.Models.Posts.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wanderer.Domain.Models.Users.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Trips.Trip", b =>
                {
                    b.HasOne("Wanderer.Domain.Models.Users.User", "Owner")
                        .WithMany("Trips")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Trips.Visits.CityVisit", b =>
                {
                    b.HasOne("Wanderer.Domain.Models.Locations.City", "City")
                        .WithMany("CityVisits")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wanderer.Domain.Models.Trips.Trip", "Trip")
                        .WithMany("CityVisits")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Trips.Visits.DayVisit", b =>
                {
                    b.HasOne("Wanderer.Domain.Models.Trips.Visits.CityVisit", "CityVisit")
                        .WithMany("Days")
                        .HasForeignKey("CityVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CityVisit");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Trips.Visits.WaypointVisit", b =>
                {
                    b.HasOne("Wanderer.Domain.Models.Trips.Visits.DayVisit", "DayVisit")
                        .WithMany("WaypointVisits")
                        .HasForeignKey("DayVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wanderer.Domain.Models.Locations.Waypoint", "Waypoint")
                        .WithMany("WaypointVisits")
                        .HasForeignKey("WaypointId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DayVisit");

                    b.Navigation("Waypoint");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Users.User", b =>
                {
                    b.HasOne("Wanderer.Domain.Models.Locations.City", "HomeCity")
                        .WithMany("Users")
                        .HasForeignKey("HomeCityId");

                    b.Navigation("HomeCity");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Users.UserFollower", b =>
                {
                    b.HasOne("Wanderer.Domain.Models.Users.User", "Follower")
                        .WithMany("Following")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Wanderer.Domain.Models.Users.User", "User")
                        .WithMany("Followers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Follower");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Locations.City", b =>
                {
                    b.Navigation("CityVisits");

                    b.Navigation("Images");

                    b.Navigation("Users");

                    b.Navigation("Waypoints");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Locations.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Locations.Waypoint", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("WaypointVisits");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Posts.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Trips.Trip", b =>
                {
                    b.Navigation("CityVisits");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Trips.Visits.CityVisit", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Trips.Visits.DayVisit", b =>
                {
                    b.Navigation("WaypointVisits");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Users.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("Likes");

                    b.Navigation("Posts");

                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
