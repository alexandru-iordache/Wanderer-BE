// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wanderer.Infrastructure.Context;

#nullable disable

namespace Wanderer.Infrastructure.Migrations
{
    [DbContext(typeof(WandererDbContext))]
    [Migration("20250409112224_MoveDescriptionFieldAndSetPrecisionForLatAndLongProps")]
    partial class MoveDescriptionFieldAndSetPrecisionForLatAndLongProps
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Wanderer.Domain.Models.Locations.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)")
                        .HasColumnName("LATITUDE");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)")
                        .HasColumnName("LONGITUDE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("NAME");

                    b.Property<string>("NorthEastBound")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NORTH_EAST_BOUND");

                    b.Property<string>("PlaceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PLACE_ID");

                    b.Property<string>("SouthWestBound")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SOUTH_WEST_BOUND");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("PlaceId")
                        .IsUnique();

                    b.ToTable("CITIES", (string)null);
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Locations.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("COUNTRIES", (string)null);
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Locations.Waypoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)")
                        .HasColumnName("LATITUDE");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)")
                        .HasColumnName("LONGITUDE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("NAME");

                    b.Property<string>("PlaceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PLACE_ID");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TYPE");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PlaceId")
                        .IsUnique();

                    b.ToTable("WAYPOINTS", (string)null);
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Trips.Trip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("START_DATE");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("TITLE");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("TRIPS", (string)null);
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Trips.Visits.CityVisit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<int>("NumberOfNights")
                        .HasColumnType("int")
                        .HasColumnName("NO_OF_NIGHTS");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("ORDER");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("START_DATE");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("TripId");

                    b.ToTable("CITY_VISITS", (string)null);
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Trips.Visits.DayVisit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CityVisitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("DATE");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("DESCRIPTION");

                    b.HasKey("Id");

                    b.HasIndex("CityVisitId");

                    b.ToTable("DAY_VISITS", (string)null);
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Trips.Visits.WaypointVisit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("DayVisitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("END_TIME");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("START_TIME");

                    b.Property<Guid>("WaypointId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DayVisitId");

                    b.HasIndex("WaypointId");

                    b.ToTable("WAYPOINT_VISITS", (string)null);
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ADDRESS");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("FirebaseId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("FIREBASE_ID");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("PROFILE_NAME");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("FirebaseId")
                        .IsUnique();

                    b.ToTable("USERS", (string)null);
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Locations.City", b =>
                {
                    b.HasOne("Wanderer.Domain.Models.Locations.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Locations.Waypoint", b =>
                {
                    b.HasOne("Wanderer.Domain.Models.Locations.City", "City")
                        .WithMany("Waypoints")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Trips.Trip", b =>
                {
                    b.HasOne("Wanderer.Domain.Models.Users.User", "Owner")
                        .WithMany("Trips")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Trips.Visits.CityVisit", b =>
                {
                    b.HasOne("Wanderer.Domain.Models.Locations.City", "City")
                        .WithMany("CityVisits")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wanderer.Domain.Models.Trips.Trip", "Trip")
                        .WithMany("CityVisits")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Trips.Visits.DayVisit", b =>
                {
                    b.HasOne("Wanderer.Domain.Models.Trips.Visits.CityVisit", "CityVisit")
                        .WithMany("Days")
                        .HasForeignKey("CityVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CityVisit");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Trips.Visits.WaypointVisit", b =>
                {
                    b.HasOne("Wanderer.Domain.Models.Trips.Visits.DayVisit", "DayVisit")
                        .WithMany("WaypointVisits")
                        .HasForeignKey("DayVisitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Wanderer.Domain.Models.Locations.Waypoint", "Waypoint")
                        .WithMany("WaypointVisits")
                        .HasForeignKey("WaypointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DayVisit");

                    b.Navigation("Waypoint");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Locations.City", b =>
                {
                    b.Navigation("CityVisits");

                    b.Navigation("Waypoints");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Locations.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Locations.Waypoint", b =>
                {
                    b.Navigation("WaypointVisits");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Trips.Trip", b =>
                {
                    b.Navigation("CityVisits");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Trips.Visits.CityVisit", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Trips.Visits.DayVisit", b =>
                {
                    b.Navigation("WaypointVisits");
                });

            modelBuilder.Entity("Wanderer.Domain.Models.Users.User", b =>
                {
                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
